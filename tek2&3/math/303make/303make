#!/usr/bin/env python3
##
## EPITECH PROJECT, 2022
## B-MAT-500-STG-5-1-302separation-kevin.zilliox
## File description:
## 302separation
##

import sys
from copy import *
from math import *
import os.path

def create_matrix(name, a):
    matrix = [list(range(1 + len(name) * i, 1 + len(name) * (i + 1))) for i in range(len(name))]
    for i in range (0, len(name)):
            for y in range (0, len(name)):
                matrix[i][y] = 0
    for m in range (0, len(a)):
        for i in range (0, len(matrix)):
            for y in range (0, len(matrix[i])):
                for n in range(1, len(a[m])):
                    if (a[m][0] == name[i] and a[m][n] == name[y]):
                        matrix[y][i] = 1
    return (matrix)

def deep_search(matrix, name, n):
    for y in range (0, len(matrix[n])):
        if (matrix[n][y] == 1):
            print(" -> %s"%(name[y]), end = "")
            deep_search(matrix, name, y)

def create_matrix2(name, a):
    matrix = [list(range(1 + len(name) * i, 1 + len(name) * (i + 1))) for i in range(len(name))]
    for i in range (0, len(name)):
            for y in range (0, len(name)):
                matrix[i][y] = 0
    for m in range (0, len(a)):
        for i in range (0, len(matrix)):
            for y in range (0, len(matrix[i])):
                for n in range(1, len(a[m])):
                    if (a[m][0] == name[i] and a[m][n] == name[y]):
                        matrix[y][i] = 1
                        matrix[i][y] = 1
    return (matrix)

def matrix_result(matrixbase, matrixmul, i, y):
    result = 0
    for n in range (0, len(matrixmul[i])):
        result = result + matrixmul[i][n] * matrixbase[n][y]
    return (result)

def multiplie_matrix(matrixbase, matrixmul, matrixtmp):
    for i in range (0, len(matrixmul)):
        for y in range (0, len(matrixmul[i])):
            matrixtmp[i][y] = matrixmul[i][y]
    for i in range (0, len(matrixmul)):
        for y in range (0, len(matrixmul[i])):
            matrixmul[i][y] = matrix_result(matrixbase, matrixtmp, i, y)
    return(matrixmul)

def print_command(command):
    for i in range(0, len(command)):
        print(command[i], end =' ')
    print('')

def print_matrix(matrix):
    for i in range (0, len(matrix)):
        for y in range (0, len(matrix[i])):
            print (matrix[i][y], end = "")
            if (y + 1 != len(matrix[i])):
                print (" ", end = "")
        print("")

if __name__ == "__main__":
    arg = len(sys.argv) - 1
    if (arg == 1):
        if (sys.argv[1] == "-h"):
            print ("USAGE\n    ./303make makefile [file]\nDESCRIPTION\n    makefile    name of the makefile\n    file        name of a recently modified file")
            exit (0)
    if (arg < 1 or arg > 2):
        print ("USAGE\n    ./303make makefile [file]\nDESCRIPTION\n    makefile    name of the makefile\n    file        name of a recently modified file")
        exit (84)
    if (os.path.exists(sys.argv[1]) == 0):
        exit (84)
    f = open(sys.argv[1], "r")
    link = f.read()
    if (len(link) == 0):
        exit (84)
    link = link.split('\n')
    for i in range(0, len(link)):
        link[i] = link[i].split(" ")
    name = []
    for i in range(0, len(link)):
        for y in range(0, len(link[i])):
            if (link[i][y] != '' and link[i][y] != "-c" and link[i][y] != "-o" and link[i][y] != "cc"):
                link[i][y] = link[i][y].strip(':')
                name.append(link[i][y])
    name = list(dict.fromkeys(name))
    name.sort()
    matrix = create_matrix(name, link)
    if (arg == 1):
        for i in range (0, len(matrix)):
            print(matrix[i])
        print('')
        for i in range(0, len(matrix)):
            for y in range (0, len(matrix[i])):
                if (matrix[i][y] == 1):
                    print("%s -> %s"%(name[i], name[y]), end = "")
                    deep_search(matrix, name, y)
                    print('')
        exit (0)
    if (arg == 2):
        if sys.argv[2] not in name:
            exit (84)
        matrixbase = create_matrix2(name, link)
        matrixmul = create_matrix2(name, link)
        matrixresult = create_matrix2(name, link)
        matrixtmp = create_matrix2(name, link)
        n = len(name) - 3
        for m in range (2, n):
            matrixmul = multiplie_matrix(matrixbase, matrixmul, matrixtmp)
            for i in range (0, len(name)):
                for y in range (0, len(name)):
                    if (i != y and matrixmul[i][y] != 0 and matrixresult[i][y] == 0):
                        matrixresult[i][y] = m
        f = open(sys.argv[1], "r")
        file = f.read()
        file = file.split('\n')
        command = []
        for i in range(0, len(file)):
            if (file[i] != '' and "cc" in file[i]):
                file[i] = file[i].split(' ')
                command.append(file[i])
        command.sort()
        for i in range (0, len(command)):
            for y in range (0, len(command[i])):
                if (command[i][y] in name):
                    if (command[i][y] == sys.argv[2]):
                        print_command(command[i])
                        break
                    elif (matrixresult[name.index(command[i][y])][name.index(sys.argv[2])] != 0):
                        print_command(command[i])
                        break